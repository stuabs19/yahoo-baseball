#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 30 16:47:03 2017

@author: Andy
"""


import urllib2, re
import numpy as np
import pandas as pd


#beg_week = input('From week?')

end_week = input('Through week?')

num_teams = input('Number of teams?')

teams = []

for p in range(num_teams):
#
    teams.append(p+1)

num_cats = 10

urls = []

league_num = input('League number?')

#list of line 2's is a list of team 14, 13, 12, etc's lines for one week

#list of line 1's is a list of team 1, 2, 3's for one week. These may have to be converted to numpy arrays or dictionaries to put them into a .csv or squl

list_of_line1s = []

list_of_line2sP = []

ast_regex= '(\.?(?:\d{1,3}?)(\.?)(?:\d{2,3})\*)'

tie_regex = 'No-pend\"\>(\d{1,3}\.?\d{0,8})'

team_locator = '\'Grid-u\sNowrap\'\>(?:\<a\s{2}href="\/b1\/\d{1,6}\/\d{1,2}"\>)'

incl_ties = '(?:((?:[0-9]|\.|\*){1,5})(?:\<\/a\>)?(?:\<\/div\>)(?:\<\/td\>)(?:\<td\sclass=\")(?:[A-Z]*|[a-z]*|\s|-|\d*)*"\>\<div\s\>|(-)<\/div\>\<)'

for q in range(len(teams)/2):

    url = 'http://baseball.fantasysports.yahoo.com/b1/' + str(league_num) + '/matchup?week=' + str(end_week) + '&mid1=' + str(teams[q]) + '&mid2=' + str(teams[-(q+1)])
    
    	#str(teams[i]) + '&mid2=' + str(teams[-(i+1)])
     
     #'13' + '&mid2=' + '2'
    
    results = urllib2.urlopen(url)
    
    	#print results.info()
    
    html = results.read()

    numbers_regex = '(\d{2,3})'
    
    team1 = []
    team2 = []

    pre_stat = re.split(team_locator,html)
    #
    stat_line1 = re.split(incl_ties,pre_stat[1])
    #
    for c in range(len(stat_line1)):
        
        if stat_line1[c]:
            
            if len(stat_line1[c]) < 8 and len(stat_line1[c]) > 0:
                
                team1.append(stat_line1[c])
 
    #team1 includes astricked tied values. Find them and then replace using tie_regex

    team2p = []
    
    stat_line2 = re.split(incl_ties,pre_stat[2])
    
    er = 0
    
    if len(team1) != 10:
    
        er = 1
        
        print 'Error in team1'
         
        print len(team1)
    
    if er == 1:
    
    	pass
    
    for e in range(len(stat_line2)):
        
        if stat_line2[e]:
    
            if len(stat_line2[e]) < 8 and len(stat_line2[e]) > 0:
    
                team2p.append(stat_line2[e])

    if len(team2p) != 10:
        
        for e in range(len(team2p)):
            
            if e <= 9:
                
                team2.append(team2p[e])
                
    else:
        
        team2 = team2p
                
    for d in range(len(team2)):
        
        if team1[d] == '-':
            
            if d == 4:
                
                team1[d] = '-1'
    
            else:
                
                team1[d] = '99999'
    
        if team2[d] == '-':
        
            if d == 4:
                
                team2[d] = '-1'
        
            else:
                
                team2[d] = '99999'

    replace_tie_locs1 = []
    
    replace_tie_locs2 = []
    
    untied_vals = []
    
    full = re.split(tie_regex,html)
    
    for e in range(len(team1)):
    
    	tied_check = re.match(ast_regex,team1[e])	
    
    	if tied_check:
    
    		replace_tie_locs1.append(e)
    
    	tied_check = re.match(ast_regex,team2[e])	
    
    	if tied_check:
    
    		replace_tie_locs2.append(e)
    
    if len(full) > 1:
    
    
    	for k in range(len(full)):
    
    		if len(full[k]) < 12:
    
    			untied_vals.append(full[k])
    
    if len(untied_vals) > 0:
    
    	for m in range(len(replace_tie_locs1)):
    
    		team1[replace_tie_locs1[m]] = untied_vals[m]
    
    		team2[replace_tie_locs1[m]] = untied_vals[m+len(untied_vals)/2]
        
    list_of_line1s.append(team1)

    list_of_line2sP.append(team2)
    
list_of_line2s = []

for j in range(len(list_of_line2sP)):
    
    list_of_line2s.append(list_of_line2sP[len(list_of_line2sP)-(1+j)])

all_lines = np.zeros((num_teams,10))

for k in range(len(list_of_line1s)):
    
    for l in range(len(list_of_line1s[k])):
        
        a = float(list_of_line1s[k][l])
        
        b = float((list_of_line2s[k][l]))

        all_lines[k][l] = a

        all_lines[k+(num_teams)/2][l] = b

xW = np.full((num_teams,1),-5)

for o in range(len(all_lines)):
    
    for m in range(len(all_lines)):
        
        for n in range(len(all_lines[o])):

            if n == 9:

                if all_lines[o][n] < all_lines[m][n]:

                    xW[o] = xW[o] + 1
    
                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5
            
            if n == 8:

                if all_lines[o][n] < all_lines[m][n]:
                    
                    xW[o] = xW[o] + 1
    
                if all_lines[o][n] == all_lines[m][n]:

                    xW[o] = xW[o] + 0.5

            if n == 7:
                
                if all_lines[o][n] > all_lines[m][n]:

                    xW[o] = xW[o] + 1

                if all_lines[o][n] == all_lines[m][n]:             
                    
                    xW[o] = xW[o] + 0.5

            if n == 6:

                if all_lines[o][n] > all_lines[m][n]:

                    xW[o] = xW[o] + 1

                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

            if n == 5:

                if all_lines[o][n] > all_lines[m][n]:

                    xW[o] = xW[o] + 1

                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

            if n == 4:

                if all_lines[o][n] > all_lines[m][n]:

                    xW[o] = xW[o] + 1

                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

            if n == 3:

                if all_lines[o][n] > all_lines[m][n]:

                    xW[o] = xW[o] + 1

                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

            if n == 2:

                if all_lines[o][n] > all_lines[m][n]:

                    xW[o] = xW[o] + 1

                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

            if n == 1:

                if all_lines[o][n] > all_lines[m][n]:
                    
                    xW[o] = xW[o] + 1
    
                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

            if n == 0:

                if all_lines[o][n] > all_lines[m][n]:
                                
                    xW[o] = xW[o] + 1
    
                if all_lines[o][n] == all_lines[m][n]:              
                    
                    xW[o] = xW[o] + 0.5

team_names = teams

xW = xW/((num_teams-1)*10)

s = pd.DataFrame(xW,team_names,columns=['xW%'])

t = s.sort_values('xW%',ascending=0)

print t
